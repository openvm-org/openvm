[package]
name = "openvm-circuit"
description = "OpenVM circuits"
version.workspace = true
authors.workspace = true
edition.workspace = true
homepage.workspace = true
repository.workspace = true

[dependencies]
p3-baby-bear = { workspace = true }
p3-field = { workspace = true }

openvm-poseidon2-air = { workspace = true }
openvm-stark-backend = { workspace = true }
openvm-circuit-primitives = { workspace = true }
openvm-circuit-primitives-derive = { workspace = true }
openvm-circuit-derive = { workspace = true }
openvm-instructions = { workspace = true }
openvm-stark-sdk = { workspace = true }

itertools.workspace = true
tracing.workspace = true
derive-new.workspace = true
derive_more = { workspace = true, features = ["from"] }
enum_dispatch.workspace = true
backtrace.workspace = true
rand.workspace = true
serde.workspace = true
serde-big-array.workspace = true
metrics = { workspace = true, optional = true }
thiserror.workspace = true
rustc-hash.workspace = true
eyre.workspace = true
derivative.workspace = true
static_assertions.workspace = true
getset.workspace = true
dashmap.workspace = true
openvm-cuda-common = { workspace = true, optional = true }
openvm-cuda-backend = { workspace = true, optional = true }

[build-dependencies]
openvm-cuda-builder = { workspace = true, optional = true }

[target.'cfg(any(unix, windows))'.dependencies]
memmap2.workspace = true
[target.'cfg(target_os = "linux")'.dependencies]
libc.workspace = true

[dev-dependencies]
test-log.workspace = true

openvm-circuit = { workspace = true, features = ["test-utils"] }
openvm-stark-sdk.workspace = true
openvm-native-circuit = { workspace = true, features = ["test-utils"] }
openvm-native-compiler.workspace = true
openvm-rv32im-transpiler.workspace = true

[features]
default = ["parallel", "jemalloc"]
parallel = [
    "openvm-stark-backend/parallel",
    "dashmap/rayon",
    "openvm-stark-sdk/parallel",
]
metrics = [
    "dep:metrics",
    "openvm-stark-backend/metrics",
    "openvm-stark-sdk/metrics",
]
# turns on more invasive profiling for fine-grained guest metrics
perf-metrics = ["metrics"]
# use basic memory instead of mmap:
basic-memory = []
# turns on stark-backend debugger in all proofs
stark-debug = []
test-utils = []
# performance features:
mimalloc = ["openvm-stark-backend/mimalloc"]
jemalloc = ["openvm-stark-backend/jemalloc"]
jemalloc-prof = ["openvm-stark-backend/jemalloc-prof"]
nightly-features = ["openvm-stark-sdk/nightly-features"]
cuda = [
    "openvm-circuit-primitives/cuda",
    "dep:openvm-cuda-common",
    "dep:openvm-cuda-backend",
    "dep:openvm-cuda-builder",
]
