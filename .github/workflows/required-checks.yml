name: Required Checks

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["**"]
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  OPENVM_FAST_TEST: "1"

jobs:
  # Core linting and formatting checks
  lint:
    name: Lint
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=64cpu-linux-x64
      - extras=s3-cache
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
      - uses: codespell-project/actions-codespell@v2
        with:
          skip: Cargo.lock,./docs/vocs/pnpm-lock.yaml,*.txt,./crates/toolchain/openvm/src/memcpy.s,./crates/toolchain/openvm/src/memset.s,./audits/*.pdf,./guest-libs/ruint/*
          ignore_words_file: .codespellignore
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Run fmt
        run: |
          rustup install nightly
          rustup component add --toolchain nightly rustfmt
          cargo +nightly fmt --all -- --check
      - name: Run clippy
        run: |
          cargo clippy --all-targets --all --tests --features "aggregation bls12_381 bn254 build-elfs default entrypoint evm-prove evm-verify export-intrinsics export-libm function-span getrandom-unsupported halo2-compiler halo2curves heap-embedded-alloc jemalloc jemalloc-prof metrics nightly-features panic-handler parallel perf-metrics rust-runtime static-verifier std test-utils" -- -D warnings

  # Core build check
  build:
    name: Build
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=64cpu-linux-arm64
      - image=ubuntu24-full-arm64
      - extras=s3-cache
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Run build
        run: |
          cargo clean
          cargo build --verbose

  # VM core tests
  vm-tests:
    name: VM Tests
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=64cpu-linux-arm64
      - image=ubuntu24-full-arm64
      - extras=s3-cache
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - uses: taiki-e/install-action@nextest
      - name: Run vm crate tests
        working-directory: crates/vm
        run: |
          cargo nextest run --cargo-profile=fast --features parallel

  # Consolidated status check that depends on all critical jobs
  required-checks:
    needs: [lint, build, vm-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check all required jobs passed
        run: echo '${{ toJSON(needs) }}' | jq -e 'to_entries | all(.value.result == "success")'
