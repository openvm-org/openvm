name: axVM Benchmarks

on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    branches: ["**"]
    paths:
      - "stark-backend/**"
      - "stark-sdk/**"
      - "circuits/**"
      - "vm/**"
      - "toolchain/**"
      - "lib/recursion/**"
      - "benchmarks/**"
      - ".github/workflows/benchmark-call.yml"
      - ".github/workflows/benchmarks.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  AXIOM_FAST_TEST: "1"

jobs:
  create-matrix:
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=8cpu-linux-x64
    outputs:
      matrix: ${{ steps.create-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Create benchmark matrix from JSON
        id: create-matrix
        run: |
          if [ ! -f ./.github/workflows/benchmark-config.json ]; then
            echo "Error: ./.github/workflows/benchmark-config.json not found"
            exit 1
          fi
          matrix=$(jq -c '
            [
              .benchmarks[] | 
              .name as $name |
              .run_params[] | 
              {name: $name, app_log_blowup: .app_log_blowup, agg_log_blowup: .agg_log_blowup}
            ]
          ' ./.github/workflows/benchmark-config.json)
          if [ $? -ne 0 ]; then
            echo "Error: Failed to parse ./.github/workflows/benchmark-config.json"
            exit 1
          fi
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  benchmark:
    needs: create-matrix
    strategy:
      matrix:
        benchmark_run: ${{fromJson(needs.create-matrix.outputs.matrix)}}
    uses: ./.github/workflows/benchmark-call.yml
    with:
      benchmark_name: ${{ matrix.benchmark_run.name }}
      app_log_blowup: ${{ matrix.benchmark_run.app_log_blowup }}
      agg_log_blowup: ${{ matrix.benchmark_run.agg_log_blowup }}
    secrets: inherit

  summarize:
    needs: [create-matrix, benchmark]
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=8cpu-linux-arm64
      - image=arm64-rust-dev-32gb
    steps:
      ##########################################################################
      # Download individual result .md files from S3 and combine them          #
      ##########################################################################
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Load all metadata files from S3
        run: |
          mkdir results
          echo "| group | fri.log_blowup | total_cells_used | total_cycles | total_proof_time_ms | instance |" > results.md
          echo "| --- | --- | --- | --- | --- | --- |" >> results.md

          current_sha=$(git rev-parse HEAD)
          names=$(echo '${{ needs.create-matrix.outputs.matrix }}' | jq -r '.[] | "\(.name)-\(.app_log_blowup)-\(.agg_log_blowup)"' | sort)
          while read name; do
            echo "Downloading results for benchmark: $name"
            s5cmd cp "s3://axiom-workflow-data-sandbox-us-east-1/benchmark/github/results/${current_sha}-${name}.md" "results/${name}.md"
            awk '
              /\| group \| fri\.log_blowup \| total_cells_used \| total_cycles \| total_proof_time_ms \|/ {
                getline;
                getline;
                table_row=$0;
                next;
              }
              /Instance Type:/ {
                if (table_row) {
                  print table_row " " $3 " |";
                  exit;
                }
              }
            ' "results/${name}.md" >> results.md
          done <<< "$names"

          echo "Commit: https://github.com/${{ github.repository }}/commit/${current_sha}" >> results.md
          echo "" >> results.md
          echo "[Benchmark Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> results.md
          mkdir -p /tmp/benchmark-results/
          cp results.md /tmp/benchmark-results/

      ##########################################################################
      # Update PR comment upon a pull request event                            #
      ##########################################################################
      - name: Collapse previous comment (if exists)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            for (const comment of comments.data) {
              if (comment.user.login == "github-actions[bot]" && comment.body.startsWith("<!--Benchmark Results-->")) {
                console.log("collapse comment ", comment.id);
                const resp = await github.graphql(`
                  mutation {
                    minimizeComment(input: {classifier: OUTDATED, subjectId: "${comment.node_id}"}) {
                      minimizedComment {
                        isMinimized
                      }
                    }
                  }
                `);
              }
            }
      
      - name: Add comment to pull request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')
            const newBenchmark = fs.readFileSync('/tmp/benchmark-results/results.md', { encoding: 'utf8', flag: 'r' })

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `<!--Benchmark Results-->\n${newBenchmark}`
            });

      ##########################################################################
      # Update gh-pages with summary upon a push event                         #
      ##########################################################################
      - uses: actions/checkout@v4
        # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          ref: gh-pages-test

      - name: set up git
        # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      # TODO[stephenh]: remove rm line after backfill
      - name: Update github pages with new bench results
        # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git rm -f benchmarks/*.md || true
          cp /tmp/benchmark-results/results.md benchmarks/summary.md
          git add benchmarks/summary.md
          git commit --allow-empty -m "Update summarized benchmark results"
          git push
