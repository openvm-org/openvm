name: "Benchmark: Coordinate Runner & Reporting"

on:
  workflow_dispatch:
    inputs:
      benchmark_name:
        type: choice
        required: true
        description: The name of the benchmark to run
        options:
          - vm_verify_fibair
          - vm_static_verify_fibair
          - single_rw
          - single_filter
      aws_instance_type:
        type: string
        required: false
        description: The type of EC2 instance to start
        default: r7g.8xlarge
  workflow_call:
    inputs:
      benchmark_name:
        type: string
        required: true
        description: The name of the benchmark to run
      aws_instance_type:
        type: string
        required: false
        description: The type of EC2 instance to start
        default: r7g.8xlarge

env:
  S3_PATH: s3://axiom-workflow-data-staging-us-east-1/benchmark/github/results

jobs:
  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: [ self-hosted, coordinator, staging ]
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ami-0d33c5daee4966517 # arm64-rust-dev-32gb
          # ami-06dd8940c223fd887 # arm64-rust-dev-1024gb
          ec2-instance-type: ${{ inputs.aws_instance_type }}
          subnet-id: subnet-08094bf4edad62d10 # staging tooling private subnet
          security-group-id: sg-09543a06c701894f8 # allow all outbound
          iam-role-name: github-temp-runner # IAM role name to attach to the created EC2 runner

  bench-new:
    name: Run benchmark on workflow ref/branch
    needs:
      - start-runner
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      ######################################################
      # Run a different benchmark based on benchmark_name:
      - name: Run benchmark
        if: inputs.benchmark_name == 'vm_verify_fibair'
        run: |
          RUSTFLAGS="-Ctarget-cpu=native" cargo run --profile=fast --bin benchmark --features parallel -- vm_verify_fibair -n 16

      - name: Run benchmark
        if: inputs.benchmark_name == 'vm_static_verify_fibair'
        working-directory: recursion
        run: |
          mkdir -p ../benchmark
          mkdir -p ../benchmark/tmp
          bash trusted_setup_s3.sh
          RUSTFLAGS="-Ctarget-cpu=native" cargo test --profile=fast -p afs-recursion --test recursion --features parallel,static-verifier -- test_fibonacci_program_halo2_verify > ../benchmark/tmp/_result.middle.md
          sed -n "/prove halo2 verifier circuit/,\$p" ../benchmark/tmp/_result.middle.md > ../benchmark/tmp/_result.md

      - name: Run benchmark
        if: inputs.benchmark_name == 'single_rw'
        run: |
          RUSTFLAGS="-Ctarget-cpu=native" cargo run --release --bin benchmark --features parallel -- rw -r 90 -w 10 --config-folder benchmark/config/single_rw

      - name: Run benchmark
        if: inputs.benchmark_name == 'single_filter'
        run: |
          RUSTFLAGS="-Ctarget-cpu=native" cargo run --release --bin benchmark --features parallel -- predicate --config-folder benchmark/config/single_filter -f benchmark/config/olap/filter_0xfade.afo
      ######################################################
      - name: Get previous benchmark value
        id: get-previous-benchmark
        run: |
          result_path="${{ env.S3_PATH }}/main-${{ inputs.benchmark_name }}.md"
          count=` s5cmd ls $result_path | wc -l`
          
          if [[ $count -gt 0 ]]; then
            s5cmd cp $result_path results.md
          else
            touch results.md
          fi          

          previous_result="$(<results.md)"

          echo 'previous-benchmark<<EOF' >> $GITHUB_ENV
          echo '# Previous Benchmark' >> $GITHUB_ENV
          echo "${previous_result}" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Update benchmark value
        id: update-benchmark
        run: |
          current_sha=$(git rev-parse HEAD)
          echo "Current SHA: $current_sha"
          echo "current_sha=${current_sha}" >> $GITHUB_ENV
          commit_url="https://github.com/${{ github.repository }}/commit/${current_sha}"

          RESULT_PATH=benchmark/tmp/_result.md
          echo "" >> $RESULT_PATH
          echo "Commit: ${commit_url}" >> $RESULT_PATH
          echo "AWS Instance Type: [${{ inputs.aws_instance_type }}](https://instances.vantage.sh/aws/ec2/${{ inputs.aws_instance_type }})" >> $RESULT_PATH
          echo "[Benchmark Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $RESULT_PATH
          s5cmd cp $RESULT_PATH "${{ env.S3_PATH }}/${current_sha}-${{ inputs.benchmark_name }}.md"

          new_result="$(<${RESULT_PATH})"
          echo "${new_result}"

          echo 'new-benchmark<<EOF' >> $GITHUB_ENV
          echo "# New Benchmark" >> $GITHUB_ENV
          echo "${new_result}" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Collapse previous comment (if exists)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const previousBenchmark = process.env['previous-benchmark'];
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            for (const comment of comments.data) {
              if (comment.user.login == "github-actions[bot]" && comment.body.startsWith("${{ inputs.benchmark_name }}\n\n")) {
                console.log("collapse comment ", comment.id);
                const resp = await github.graphql(`
                  mutation {
                    minimizeComment(input: {classifier: OUTDATED, subjectId: "${comment.node_id}"}) {
                      minimizedComment {
                        isMinimized
                      }
                    }
                  }
                `);
              }
            }

      - name: Add comment to pull request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const previousBenchmark = process.env['previous-benchmark'];
            const newBenchmark = process.env['new-benchmark'];

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${{ inputs.benchmark_name }}\n\n${previousBenchmark}\n\n${newBenchmark}`
            });

      - name: Update latest main result in s3
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          s5cmd cp "${{ env.S3_PATH }}/${{ env.current_sha }}-${{ inputs.benchmark_name }}.md" "${{ env.S3_PATH }}/main-${{ inputs.benchmark_name }}.md"

  update-gh-pages:
    name: Update github pages with new bench results
    needs:
      - start-runner
      - bench-new
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: gh-pages

      - name: Update markdown file
        run: |
          s5cmd cp "${{ env.S3_PATH }}/main-${{ inputs.benchmark_name }}.md" benchmarks/${{ inputs.benchmark_name }}.md
          git add benchmarks/${{ inputs.benchmark_name }}.md
          git commit -m "Update benchmark result for ${{ inputs.benchmark_name }}"
          git push

  stop-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start-runner # required to get output from the start-runner job
      - bench-new # wait for bench-new to finish
      - update-gh-pages # wait for update-gh-pages to finish
    runs-on: [ self-hosted, coordinator, staging ]
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
