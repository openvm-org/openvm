name: All Required Checks

on:
  merge_group:

jobs:
  wait-for-workflows:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for all required workflows to complete
        uses: actions/github-script@v7
        with:
          script: |
            const requiredWorkflows = [
              'Lint Workspace',
              'Build Workspace', 
              'VM STARK and Compiler Tests',
              'OpenVM CLI Tests',
              'Primitives Tests',
              'OpenVM SDK Tests',
              'OpenVM Benchmarks: Coordinate Runner & Reporting',
              'Execution benchmarks',
              'STARK Recursion Tests',
              'Extension Tests',
              'RISC-V Test Vectors',
              'Guest Library Tests',
              'Native Compiler Tests',
              'Build and Serve Crate Docs'
            ];
            
            const sha = context.payload.merge_group.head_sha;
            console.log(`Checking workflows for SHA: ${sha}`);
            
            // Wait up to 60 minutes for all workflows to complete
            const maxWaitTime = 60 * 60 * 1000; // 60 minutes in milliseconds
            const startTime = Date.now();
            const pollInterval = 30000; // 30 seconds
            
            while (Date.now() - startTime < maxWaitTime) {
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: sha,
                per_page: 100
              });
              
              console.log(`Found ${checkRuns.check_runs.length} check runs`);
              
              const workflowStatuses = {};
              let allCompleted = true;
              let allSuccessful = true;
              
              // Check status of each required workflow
              for (const workflowName of requiredWorkflows) {
                const matchingRuns = checkRuns.check_runs.filter(run => 
                  run.name === workflowName || 
                  (run.check_suite && run.check_suite.app && run.check_suite.app.name === 'GitHub Actions' && run.name.includes(workflowName))
                );
                
                if (matchingRuns.length === 0) {
                  console.log(`Workflow "${workflowName}" not found yet`);
                  workflowStatuses[workflowName] = 'not_found';
                  allCompleted = false;
                } else {
                  const latestRun = matchingRuns.sort((a, b) => new Date(b.started_at) - new Date(a.started_at))[0];
                  workflowStatuses[workflowName] = {
                    status: latestRun.status,
                    conclusion: latestRun.conclusion
                  };
                  
                  if (latestRun.status !== 'completed') {
                    console.log(`Workflow "${workflowName}" is ${latestRun.status}`);
                    allCompleted = false;
                  } else if (latestRun.conclusion !== 'success') {
                    console.log(`Workflow "${workflowName}" completed with conclusion: ${latestRun.conclusion}`);
                    allSuccessful = false;
                  } else {
                    console.log(`Workflow "${workflowName}" completed successfully`);
                  }
                }
              }
              
              if (allCompleted) {
                if (allSuccessful) {
                  console.log('All required workflows completed successfully!');
                  return;
                } else {
                  console.log('Some workflows failed:');
                  for (const [name, status] of Object.entries(workflowStatuses)) {
                    if (typeof status === 'object' && status.conclusion !== 'success') {
                      console.log(`  ${name}: ${status.conclusion}`);
                    }
                  }
                  throw new Error('One or more required workflows failed');
                }
              }
              
              console.log(`Waiting ${pollInterval/1000} seconds before next check...`);
              await new Promise(resolve => setTimeout(resolve, pollInterval));
            }
            
            throw new Error('Timeout waiting for all workflows to complete');
