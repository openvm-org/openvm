use num::{BigUint, Num};

fn bls12_381_p() -> BigUint {
    BigUint::from_str_radix("1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab", 16).unwrap()
}

#[allow(dead_code)]
fn bn254_p() -> BigUint {
    BigUint::from_str_radix(
        "21888242871839275222246405745257275088696311157297823662689037894645226208583",
        10,
    )
    .unwrap()
}

#[test]
fn test_convert_string_to_u384() {
    let s = "4030969696062745741797811005853058291874379204406359442560681893891674450106959530046539719647151210908190211459382793062006703141168852426020468083171325367934590379984666859998399967609544754664110191464072930598755441160008826659219834762354786403012110463250131961575955268597858015384895449311534622125256548620283853223733396368939858981844663598065852816056384933498610930035891058807598891752166582271931875150099691598048016175399382213304673796601585080509443902692818733420199004555566113537482054218823936116647313678747500267068559627206777530424029211671772692598157901876223857571299238046741502089890557442500582300718504160740314926185458079985126192563953772118929726791041828902047546977272656240744693339962973939047279285351052107950250121751682659529260304162131862468322644288196213423232132152125277136333208005221619443705106431645884840489295409272576227859206166894626854018093044908314720";
    let x = BigUint::from_str_radix(s, 10).unwrap();
    let x = x % bls12_381_p();
    let x_bytes = x.to_bytes_be();
    x_bytes.chunks(8).for_each(|chunk| {
        std::println!("{:?}", chunk);
    });
    println!("{:?}", x_bytes.len());
}

#[test]
fn test_convert_string_to_u256() {
    let s = "30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47";
    let x = BigUint::from_str_radix(s, 16).unwrap();

    println!("{:?}", x);
}
