
// SPDX-License-Identifier: MIT

pragma solidity 0.8.19;

contract Halo2Verifier {
    fallback(bytes calldata) external returns (bytes memory) {
        assembly ("memory-safe") {
            // Enforce that Solidity memory layout is respected
            let data := mload(0x40)
            if iszero(eq(data, 0x80)) {
                revert(0, 0)
            }

            let success := true
            let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
            let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
            function validate_ec_point(x, y) -> valid {
                {
                    let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    valid := and(x_lt_p, y_lt_p)
                }
                {
                    let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let is_affine := eq(x_cube_plus_3, y_square)
                    valid := and(valid, is_affine)
                }
            }
            mstore(0xa0, mod(calldataload(0x0), f_q))
mstore(0xc0, mod(calldataload(0x20), f_q))
mstore(0xe0, mod(calldataload(0x40), f_q))
mstore(0x100, mod(calldataload(0x60), f_q))
mstore(0x120, mod(calldataload(0x80), f_q))
mstore(0x140, mod(calldataload(0xa0), f_q))
mstore(0x160, mod(calldataload(0xc0), f_q))
mstore(0x180, mod(calldataload(0xe0), f_q))
mstore(0x1a0, mod(calldataload(0x100), f_q))
mstore(0x1c0, mod(calldataload(0x120), f_q))
mstore(0x1e0, mod(calldataload(0x140), f_q))
mstore(0x200, mod(calldataload(0x160), f_q))
mstore(0x220, mod(calldataload(0x180), f_q))
mstore(0x80, 19480293523238636221746749931759559206000791274582355940719582702301097146)

        {
            let x := calldataload(0x1a0)
            mstore(0x240, x)
            let y := calldataload(0x1c0)
            mstore(0x260, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x280, keccak256(0x80, 512))
{
            let hash := mload(0x280)
            mstore(0x2a0, mod(hash, f_q))
            mstore(0x2c0, hash)
        }

        {
            let x := calldataload(0x1e0)
            mstore(0x2e0, x)
            let y := calldataload(0x200)
            mstore(0x300, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x220)
            mstore(0x320, x)
            let y := calldataload(0x240)
            mstore(0x340, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x360, keccak256(0x2c0, 160))
{
            let hash := mload(0x360)
            mstore(0x380, mod(hash, f_q))
            mstore(0x3a0, hash)
        }
mstore8(960, 1)
mstore(0x3c0, keccak256(0x3a0, 33))
{
            let hash := mload(0x3c0)
            mstore(0x3e0, mod(hash, f_q))
            mstore(0x400, hash)
        }

        {
            let x := calldataload(0x260)
            mstore(0x420, x)
            let y := calldataload(0x280)
            mstore(0x440, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x2a0)
            mstore(0x460, x)
            let y := calldataload(0x2c0)
            mstore(0x480, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x2e0)
            mstore(0x4a0, x)
            let y := calldataload(0x300)
            mstore(0x4c0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x4e0, keccak256(0x400, 224))
{
            let hash := mload(0x4e0)
            mstore(0x500, mod(hash, f_q))
            mstore(0x520, hash)
        }

        {
            let x := calldataload(0x320)
            mstore(0x540, x)
            let y := calldataload(0x340)
            mstore(0x560, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x360)
            mstore(0x580, x)
            let y := calldataload(0x380)
            mstore(0x5a0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x3a0)
            mstore(0x5c0, x)
            let y := calldataload(0x3c0)
            mstore(0x5e0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x3e0)
            mstore(0x600, x)
            let y := calldataload(0x400)
            mstore(0x620, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x640, keccak256(0x520, 288))
{
            let hash := mload(0x640)
            mstore(0x660, mod(hash, f_q))
            mstore(0x680, hash)
        }
mstore(0x6a0, mod(calldataload(0x420), f_q))
mstore(0x6c0, mod(calldataload(0x440), f_q))
mstore(0x6e0, mod(calldataload(0x460), f_q))
mstore(0x700, mod(calldataload(0x480), f_q))
mstore(0x720, mod(calldataload(0x4a0), f_q))
mstore(0x740, mod(calldataload(0x4c0), f_q))
mstore(0x760, mod(calldataload(0x4e0), f_q))
mstore(0x780, mod(calldataload(0x500), f_q))
mstore(0x7a0, mod(calldataload(0x520), f_q))
mstore(0x7c0, mod(calldataload(0x540), f_q))
mstore(0x7e0, mod(calldataload(0x560), f_q))
mstore(0x800, mod(calldataload(0x580), f_q))
mstore(0x820, mod(calldataload(0x5a0), f_q))
mstore(0x840, mod(calldataload(0x5c0), f_q))
mstore(0x860, mod(calldataload(0x5e0), f_q))
mstore(0x880, mod(calldataload(0x600), f_q))
mstore(0x8a0, mod(calldataload(0x620), f_q))
mstore(0x8c0, mod(calldataload(0x640), f_q))
mstore(0x8e0, mod(calldataload(0x660), f_q))
mstore(0x900, keccak256(0x680, 640))
{
            let hash := mload(0x900)
            mstore(0x920, mod(hash, f_q))
            mstore(0x940, hash)
        }
mstore8(2400, 1)
mstore(0x960, keccak256(0x940, 33))
{
            let hash := mload(0x960)
            mstore(0x980, mod(hash, f_q))
            mstore(0x9a0, hash)
        }

        {
            let x := calldataload(0x680)
            mstore(0x9c0, x)
            let y := calldataload(0x6a0)
            mstore(0x9e0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xa00, keccak256(0x9a0, 96))
{
            let hash := mload(0xa00)
            mstore(0xa20, mod(hash, f_q))
            mstore(0xa40, hash)
        }

        {
            let x := calldataload(0x6c0)
            mstore(0xa60, x)
            let y := calldataload(0x6e0)
            mstore(0xa80, y)
            success := and(validate_ec_point(x, y), success)
        }
{
            let x := mload(0xa0)
x := add(x, shl(88, mload(0xc0)))
x := add(x, shl(176, mload(0xe0)))
mstore(2720, x)
let y := mload(0x100)
y := add(y, shl(88, mload(0x120)))
y := add(y, shl(176, mload(0x140)))
mstore(2752, y)

            success := and(validate_ec_point(x, y), success)
        }
{
            let x := mload(0x160)
x := add(x, shl(88, mload(0x180)))
x := add(x, shl(176, mload(0x1a0)))
mstore(2784, x)
let y := mload(0x1c0)
y := add(y, shl(88, mload(0x1e0)))
y := add(y, shl(176, mload(0x200)))
mstore(2816, y)

            success := and(validate_ec_point(x, y), success)
        }
mstore(0xb20, mulmod(mload(0x660), mload(0x660), f_q))
mstore(0xb40, mulmod(mload(0xb20), mload(0xb20), f_q))
mstore(0xb60, mulmod(mload(0xb40), mload(0xb40), f_q))
mstore(0xb80, mulmod(mload(0xb60), mload(0xb60), f_q))
mstore(0xba0, mulmod(mload(0xb80), mload(0xb80), f_q))
mstore(0xbc0, mulmod(mload(0xba0), mload(0xba0), f_q))
mstore(0xbe0, mulmod(mload(0xbc0), mload(0xbc0), f_q))
mstore(0xc00, mulmod(mload(0xbe0), mload(0xbe0), f_q))
mstore(0xc20, mulmod(mload(0xc00), mload(0xc00), f_q))
mstore(0xc40, mulmod(mload(0xc20), mload(0xc20), f_q))
mstore(0xc60, mulmod(mload(0xc40), mload(0xc40), f_q))
mstore(0xc80, mulmod(mload(0xc60), mload(0xc60), f_q))
mstore(0xca0, mulmod(mload(0xc80), mload(0xc80), f_q))
mstore(0xcc0, mulmod(mload(0xca0), mload(0xca0), f_q))
mstore(0xce0, mulmod(mload(0xcc0), mload(0xcc0), f_q))
mstore(0xd00, mulmod(mload(0xce0), mload(0xce0), f_q))
mstore(0xd20, mulmod(mload(0xd00), mload(0xd00), f_q))
mstore(0xd40, mulmod(mload(0xd20), mload(0xd20), f_q))
mstore(0xd60, mulmod(mload(0xd40), mload(0xd40), f_q))
mstore(0xd80, mulmod(mload(0xd60), mload(0xd60), f_q))
mstore(0xda0, mulmod(mload(0xd80), mload(0xd80), f_q))
mstore(0xdc0, mulmod(mload(0xda0), mload(0xda0), f_q))
mstore(0xde0, addmod(mload(0xdc0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0xe00, mulmod(mload(0xde0), 21888237653275510688422624196183639687472264873923820041627027729598873448513, f_q))
mstore(0xe20, mulmod(mload(0xe00), 13225785879531581993054172815365636627224369411478295502904397545373139154045, f_q))
mstore(0xe40, addmod(mload(0x660), 8662456992307693229192232929891638461323994988937738840793806641202669341572, f_q))
mstore(0xe60, mulmod(mload(0xe00), 10939663269433627367777756708678102241564365262857670666700619874077960926249, f_q))
mstore(0xe80, addmod(mload(0x660), 10948579602405647854468649036579172846983999137558363676997584312497847569368, f_q))
mstore(0xea0, mulmod(mload(0xe00), 11016257578652593686382655500910603527869149377564754001549454008164059876499, f_q))
mstore(0xec0, addmod(mload(0x660), 10871985293186681535863750244346671560679215022851280342148750178411748619118, f_q))
mstore(0xee0, mulmod(mload(0xe00), 15402826414547299628414612080036060696555554914079673875872749760617770134879, f_q))
mstore(0xf00, addmod(mload(0x660), 6485416457291975593831793665221214391992809486336360467825454425958038360738, f_q))
mstore(0xf20, mulmod(mload(0xe00), 21710372849001950800533397158415938114909991150039389063546734567764856596059, f_q))
mstore(0xf40, addmod(mload(0x660), 177870022837324421713008586841336973638373250376645280151469618810951899558, f_q))
mstore(0xf60, mulmod(mload(0xe00), 2785514556381676080176937710880804108647911392478702105860685610379369825016, f_q))
mstore(0xf80, addmod(mload(0x660), 19102728315457599142069468034376470979900453007937332237837518576196438670601, f_q))
mstore(0xfa0, mulmod(mload(0xe00), 8734126352828345679573237859165904705806588461301144420590422589042130041188, f_q))
mstore(0xfc0, addmod(mload(0x660), 13154116519010929542673167886091370382741775939114889923107781597533678454429, f_q))
mstore(0xfe0, mulmod(mload(0xe00), 1, f_q))
mstore(0x1000, addmod(mload(0x660), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x1020, mulmod(mload(0xe00), 11211301017135681023579411905410872569206244553457844956874280139879520583390, f_q))
mstore(0x1040, addmod(mload(0x660), 10676941854703594198666993839846402519342119846958189386823924046696287912227, f_q))
mstore(0x1060, mulmod(mload(0xe00), 1426404432721484388505361748317961535523355871255605456897797744433766488507, f_q))
mstore(0x1080, addmod(mload(0x660), 20461838439117790833741043996939313553025008529160428886800406442142042007110, f_q))
mstore(0x10a0, mulmod(mload(0xe00), 12619617507853212586156872920672483948819476989779550311307282715684870266992, f_q))
mstore(0x10c0, addmod(mload(0x660), 9268625363986062636089532824584791139728887410636484032390921470890938228625, f_q))
mstore(0x10e0, mulmod(mload(0xe00), 19032961837237948602743626455740240236231119053033140765040043513661803148152, f_q))
mstore(0x1100, addmod(mload(0x660), 2855281034601326619502779289517034852317245347382893578658160672914005347465, f_q))
mstore(0x1120, mulmod(mload(0xe00), 915149353520972163646494413843788069594022902357002628455555785223409501882, f_q))
mstore(0x1140, addmod(mload(0x660), 20973093518318303058599911331413487018954341498059031715242648401352398993735, f_q))
mstore(0x1160, mulmod(mload(0xe00), 3766081621734395783232337525162072736827576297943013392955872170138036189193, f_q))
mstore(0x1180, addmod(mload(0x660), 18122161250104879439014068220095202351720788102473020950742332016437772306424, f_q))
mstore(0x11a0, mulmod(mload(0xe00), 4245441013247250116003069945606352967193023389718465410501109428393342802981, f_q))
mstore(0x11c0, addmod(mload(0x660), 17642801858592025106243335799650922121355341010697568933197094758182465692636, f_q))
mstore(0x11e0, mulmod(mload(0xe00), 5854133144571823792863860130267644613802765696134002830362054821530146160770, f_q))
mstore(0x1200, addmod(mload(0x660), 16034109727267451429382545614989630474745598704282031513336149365045662334847, f_q))
mstore(0x1220, mulmod(mload(0xe00), 5980488956150442207659150513163747165544364597008566989111579977672498964212, f_q))
mstore(0x1240, addmod(mload(0x660), 15907753915688833014587255232093527923003999803407467354586624208903309531405, f_q))
mstore(0x1260, mulmod(mload(0xe00), 14557038802599140430182096396825290815503940951075961210638273254419942783582, f_q))
mstore(0x1280, addmod(mload(0x660), 7331204069240134792064309348431984273044423449340073133059930932155865712035, f_q))
mstore(0x12a0, mulmod(mload(0xe00), 13553911191894110065493137367144919847521088405945523452288398666974237857208, f_q))
mstore(0x12c0, addmod(mload(0x660), 8334331679945165156753268378112355241027275994470510891409805519601570638409, f_q))
mstore(0x12e0, mulmod(mload(0xe00), 9697063347556872083384215826199993067635178715531258559890418744774301211662, f_q))
mstore(0x1300, addmod(mload(0x660), 12191179524282403138862189919057282020913185684884775783807785441801507283955, f_q))
{
            let prod := mload(0xe40)

                prod := mulmod(mload(0xe80), prod, f_q)
                mstore(0x1320, prod)

                prod := mulmod(mload(0xec0), prod, f_q)
                mstore(0x1340, prod)

                prod := mulmod(mload(0xf00), prod, f_q)
                mstore(0x1360, prod)

                prod := mulmod(mload(0xf40), prod, f_q)
                mstore(0x1380, prod)

                prod := mulmod(mload(0xf80), prod, f_q)
                mstore(0x13a0, prod)

                prod := mulmod(mload(0xfc0), prod, f_q)
                mstore(0x13c0, prod)

                prod := mulmod(mload(0x1000), prod, f_q)
                mstore(0x13e0, prod)

                prod := mulmod(mload(0x1040), prod, f_q)
                mstore(0x1400, prod)

                prod := mulmod(mload(0x1080), prod, f_q)
                mstore(0x1420, prod)

                prod := mulmod(mload(0x10c0), prod, f_q)
                mstore(0x1440, prod)

                prod := mulmod(mload(0x1100), prod, f_q)
                mstore(0x1460, prod)

                prod := mulmod(mload(0x1140), prod, f_q)
                mstore(0x1480, prod)

                prod := mulmod(mload(0x1180), prod, f_q)
                mstore(0x14a0, prod)

                prod := mulmod(mload(0x11c0), prod, f_q)
                mstore(0x14c0, prod)

                prod := mulmod(mload(0x1200), prod, f_q)
                mstore(0x14e0, prod)

                prod := mulmod(mload(0x1240), prod, f_q)
                mstore(0x1500, prod)

                prod := mulmod(mload(0x1280), prod, f_q)
                mstore(0x1520, prod)

                prod := mulmod(mload(0x12c0), prod, f_q)
                mstore(0x1540, prod)

                prod := mulmod(mload(0x1300), prod, f_q)
                mstore(0x1560, prod)

                prod := mulmod(mload(0xde0), prod, f_q)
                mstore(0x1580, prod)

        }
mstore(0x15c0, 32)
mstore(0x15e0, 32)
mstore(0x1600, 32)
mstore(0x1620, mload(0x1580))
mstore(0x1640, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x1660, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x15c0, 0xc0, 0x15a0, 0x20), 1), success)
{

            let inv := mload(0x15a0)
            let v

                    v := mload(0xde0)
                    mstore(3552, mulmod(mload(0x1560), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1300)
                    mstore(4864, mulmod(mload(0x1540), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x12c0)
                    mstore(4800, mulmod(mload(0x1520), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1280)
                    mstore(4736, mulmod(mload(0x1500), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1240)
                    mstore(4672, mulmod(mload(0x14e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1200)
                    mstore(4608, mulmod(mload(0x14c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x11c0)
                    mstore(4544, mulmod(mload(0x14a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1180)
                    mstore(4480, mulmod(mload(0x1480), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1140)
                    mstore(4416, mulmod(mload(0x1460), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1100)
                    mstore(4352, mulmod(mload(0x1440), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x10c0)
                    mstore(4288, mulmod(mload(0x1420), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1080)
                    mstore(4224, mulmod(mload(0x1400), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1040)
                    mstore(4160, mulmod(mload(0x13e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1000)
                    mstore(4096, mulmod(mload(0x13c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0xfc0)
                    mstore(4032, mulmod(mload(0x13a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0xf80)
                    mstore(3968, mulmod(mload(0x1380), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0xf40)
                    mstore(3904, mulmod(mload(0x1360), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0xf00)
                    mstore(3840, mulmod(mload(0x1340), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0xec0)
                    mstore(3776, mulmod(mload(0x1320), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0xe80)
                    mstore(3712, mulmod(mload(0xe40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0xe40, inv)

        }
mstore(0x1680, mulmod(mload(0xe20), mload(0xe40), f_q))
mstore(0x16a0, mulmod(mload(0xe60), mload(0xe80), f_q))
mstore(0x16c0, mulmod(mload(0xea0), mload(0xec0), f_q))
mstore(0x16e0, mulmod(mload(0xee0), mload(0xf00), f_q))
mstore(0x1700, mulmod(mload(0xf20), mload(0xf40), f_q))
mstore(0x1720, mulmod(mload(0xf60), mload(0xf80), f_q))
mstore(0x1740, mulmod(mload(0xfa0), mload(0xfc0), f_q))
mstore(0x1760, mulmod(mload(0xfe0), mload(0x1000), f_q))
mstore(0x1780, mulmod(mload(0x1020), mload(0x1040), f_q))
mstore(0x17a0, mulmod(mload(0x1060), mload(0x1080), f_q))
mstore(0x17c0, mulmod(mload(0x10a0), mload(0x10c0), f_q))
mstore(0x17e0, mulmod(mload(0x10e0), mload(0x1100), f_q))
mstore(0x1800, mulmod(mload(0x1120), mload(0x1140), f_q))
mstore(0x1820, mulmod(mload(0x1160), mload(0x1180), f_q))
mstore(0x1840, mulmod(mload(0x11a0), mload(0x11c0), f_q))
mstore(0x1860, mulmod(mload(0x11e0), mload(0x1200), f_q))
mstore(0x1880, mulmod(mload(0x1220), mload(0x1240), f_q))
mstore(0x18a0, mulmod(mload(0x1260), mload(0x1280), f_q))
mstore(0x18c0, mulmod(mload(0x12a0), mload(0x12c0), f_q))
mstore(0x18e0, mulmod(mload(0x12e0), mload(0x1300), f_q))
{
            let result := mulmod(mload(0x1760), mload(0xa0), f_q)
result := addmod(mulmod(mload(0x1780), mload(0xc0), f_q), result, f_q)
result := addmod(mulmod(mload(0x17a0), mload(0xe0), f_q), result, f_q)
result := addmod(mulmod(mload(0x17c0), mload(0x100), f_q), result, f_q)
result := addmod(mulmod(mload(0x17e0), mload(0x120), f_q), result, f_q)
result := addmod(mulmod(mload(0x1800), mload(0x140), f_q), result, f_q)
result := addmod(mulmod(mload(0x1820), mload(0x160), f_q), result, f_q)
result := addmod(mulmod(mload(0x1840), mload(0x180), f_q), result, f_q)
result := addmod(mulmod(mload(0x1860), mload(0x1a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1880), mload(0x1c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x18a0), mload(0x1e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x18c0), mload(0x200), f_q), result, f_q)
result := addmod(mulmod(mload(0x18e0), mload(0x220), f_q), result, f_q)
mstore(6400, result)
        }
mstore(0x1920, mulmod(mload(0x6e0), mload(0x6c0), f_q))
mstore(0x1940, addmod(mload(0x6a0), mload(0x1920), f_q))
mstore(0x1960, addmod(mload(0x1940), sub(f_q, mload(0x700)), f_q))
mstore(0x1980, mulmod(mload(0x1960), mload(0x760), f_q))
mstore(0x19a0, mulmod(mload(0x500), mload(0x1980), f_q))
mstore(0x19c0, addmod(1, sub(f_q, mload(0x820)), f_q))
mstore(0x19e0, mulmod(mload(0x19c0), mload(0x1760), f_q))
mstore(0x1a00, addmod(mload(0x19a0), mload(0x19e0), f_q))
mstore(0x1a20, mulmod(mload(0x500), mload(0x1a00), f_q))
mstore(0x1a40, mulmod(mload(0x820), mload(0x820), f_q))
mstore(0x1a60, addmod(mload(0x1a40), sub(f_q, mload(0x820)), f_q))
mstore(0x1a80, mulmod(mload(0x1a60), mload(0x1680), f_q))
mstore(0x1aa0, addmod(mload(0x1a20), mload(0x1a80), f_q))
mstore(0x1ac0, mulmod(mload(0x500), mload(0x1aa0), f_q))
mstore(0x1ae0, addmod(1, sub(f_q, mload(0x1680)), f_q))
mstore(0x1b00, addmod(mload(0x16a0), mload(0x16c0), f_q))
mstore(0x1b20, addmod(mload(0x1b00), mload(0x16e0), f_q))
mstore(0x1b40, addmod(mload(0x1b20), mload(0x1700), f_q))
mstore(0x1b60, addmod(mload(0x1b40), mload(0x1720), f_q))
mstore(0x1b80, addmod(mload(0x1b60), mload(0x1740), f_q))
mstore(0x1ba0, addmod(mload(0x1ae0), sub(f_q, mload(0x1b80)), f_q))
mstore(0x1bc0, mulmod(mload(0x7c0), mload(0x380), f_q))
mstore(0x1be0, addmod(mload(0x720), mload(0x1bc0), f_q))
mstore(0x1c00, addmod(mload(0x1be0), mload(0x3e0), f_q))
mstore(0x1c20, mulmod(mload(0x7e0), mload(0x380), f_q))
mstore(0x1c40, addmod(mload(0x6a0), mload(0x1c20), f_q))
mstore(0x1c60, addmod(mload(0x1c40), mload(0x3e0), f_q))
mstore(0x1c80, mulmod(mload(0x1c60), mload(0x1c00), f_q))
mstore(0x1ca0, mulmod(mload(0x800), mload(0x380), f_q))
mstore(0x1cc0, addmod(mload(0x1900), mload(0x1ca0), f_q))
mstore(0x1ce0, addmod(mload(0x1cc0), mload(0x3e0), f_q))
mstore(0x1d00, mulmod(mload(0x1ce0), mload(0x1c80), f_q))
mstore(0x1d20, mulmod(mload(0x1d00), mload(0x840), f_q))
mstore(0x1d40, mulmod(1, mload(0x380), f_q))
mstore(0x1d60, mulmod(mload(0x660), mload(0x1d40), f_q))
mstore(0x1d80, addmod(mload(0x720), mload(0x1d60), f_q))
mstore(0x1da0, addmod(mload(0x1d80), mload(0x3e0), f_q))
mstore(0x1dc0, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x380), f_q))
mstore(0x1de0, mulmod(mload(0x660), mload(0x1dc0), f_q))
mstore(0x1e00, addmod(mload(0x6a0), mload(0x1de0), f_q))
mstore(0x1e20, addmod(mload(0x1e00), mload(0x3e0), f_q))
mstore(0x1e40, mulmod(mload(0x1e20), mload(0x1da0), f_q))
mstore(0x1e60, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x380), f_q))
mstore(0x1e80, mulmod(mload(0x660), mload(0x1e60), f_q))
mstore(0x1ea0, addmod(mload(0x1900), mload(0x1e80), f_q))
mstore(0x1ec0, addmod(mload(0x1ea0), mload(0x3e0), f_q))
mstore(0x1ee0, mulmod(mload(0x1ec0), mload(0x1e40), f_q))
mstore(0x1f00, mulmod(mload(0x1ee0), mload(0x820), f_q))
mstore(0x1f20, addmod(mload(0x1d20), sub(f_q, mload(0x1f00)), f_q))
mstore(0x1f40, mulmod(mload(0x1f20), mload(0x1ba0), f_q))
mstore(0x1f60, addmod(mload(0x1ac0), mload(0x1f40), f_q))
mstore(0x1f80, mulmod(mload(0x500), mload(0x1f60), f_q))
mstore(0x1fa0, addmod(1, sub(f_q, mload(0x860)), f_q))
mstore(0x1fc0, mulmod(mload(0x1fa0), mload(0x1760), f_q))
mstore(0x1fe0, addmod(mload(0x1f80), mload(0x1fc0), f_q))
mstore(0x2000, mulmod(mload(0x500), mload(0x1fe0), f_q))
mstore(0x2020, mulmod(mload(0x860), mload(0x860), f_q))
mstore(0x2040, addmod(mload(0x2020), sub(f_q, mload(0x860)), f_q))
mstore(0x2060, mulmod(mload(0x2040), mload(0x1680), f_q))
mstore(0x2080, addmod(mload(0x2000), mload(0x2060), f_q))
mstore(0x20a0, mulmod(mload(0x500), mload(0x2080), f_q))
mstore(0x20c0, addmod(mload(0x8a0), mload(0x380), f_q))
mstore(0x20e0, mulmod(mload(0x20c0), mload(0x880), f_q))
mstore(0x2100, addmod(mload(0x8e0), mload(0x3e0), f_q))
mstore(0x2120, mulmod(mload(0x2100), mload(0x20e0), f_q))
mstore(0x2140, mulmod(mload(0x6a0), mload(0x780), f_q))
mstore(0x2160, addmod(mload(0x2140), mload(0x380), f_q))
mstore(0x2180, mulmod(mload(0x2160), mload(0x860), f_q))
mstore(0x21a0, addmod(mload(0x740), mload(0x3e0), f_q))
mstore(0x21c0, mulmod(mload(0x21a0), mload(0x2180), f_q))
mstore(0x21e0, addmod(mload(0x2120), sub(f_q, mload(0x21c0)), f_q))
mstore(0x2200, mulmod(mload(0x21e0), mload(0x1ba0), f_q))
mstore(0x2220, addmod(mload(0x20a0), mload(0x2200), f_q))
mstore(0x2240, mulmod(mload(0x500), mload(0x2220), f_q))
mstore(0x2260, addmod(mload(0x8a0), sub(f_q, mload(0x8e0)), f_q))
mstore(0x2280, mulmod(mload(0x2260), mload(0x1760), f_q))
mstore(0x22a0, addmod(mload(0x2240), mload(0x2280), f_q))
mstore(0x22c0, mulmod(mload(0x500), mload(0x22a0), f_q))
mstore(0x22e0, mulmod(mload(0x2260), mload(0x1ba0), f_q))
mstore(0x2300, addmod(mload(0x8a0), sub(f_q, mload(0x8c0)), f_q))
mstore(0x2320, mulmod(mload(0x2300), mload(0x22e0), f_q))
mstore(0x2340, addmod(mload(0x22c0), mload(0x2320), f_q))
mstore(0x2360, mulmod(mload(0xdc0), mload(0xdc0), f_q))
mstore(0x2380, mulmod(mload(0x2360), mload(0xdc0), f_q))
mstore(0x23a0, mulmod(mload(0x2380), mload(0xdc0), f_q))
mstore(0x23c0, mulmod(1, mload(0xdc0), f_q))
mstore(0x23e0, mulmod(1, mload(0x2360), f_q))
mstore(0x2400, mulmod(1, mload(0x2380), f_q))
mstore(0x2420, mulmod(mload(0x2340), mload(0xde0), f_q))
mstore(0x2440, mulmod(mload(0xb20), mload(0x660), f_q))
mstore(0x2460, mulmod(mload(0x2440), mload(0x660), f_q))
mstore(0x2480, mulmod(mload(0x660), 8734126352828345679573237859165904705806588461301144420590422589042130041188, f_q))
mstore(0x24a0, addmod(mload(0xa20), sub(f_q, mload(0x2480)), f_q))
mstore(0x24c0, mulmod(mload(0x660), 1, f_q))
mstore(0x24e0, addmod(mload(0xa20), sub(f_q, mload(0x24c0)), f_q))
mstore(0x2500, mulmod(mload(0x660), 11211301017135681023579411905410872569206244553457844956874280139879520583390, f_q))
mstore(0x2520, addmod(mload(0xa20), sub(f_q, mload(0x2500)), f_q))
mstore(0x2540, mulmod(mload(0x660), 1426404432721484388505361748317961535523355871255605456897797744433766488507, f_q))
mstore(0x2560, addmod(mload(0xa20), sub(f_q, mload(0x2540)), f_q))
mstore(0x2580, mulmod(mload(0x660), 12619617507853212586156872920672483948819476989779550311307282715684870266992, f_q))
mstore(0x25a0, addmod(mload(0xa20), sub(f_q, mload(0x2580)), f_q))
mstore(0x25c0, mulmod(3544324119167359571073009690693121464267965232733679586767649244433889388945, mload(0x2440), f_q))
mstore(0x25e0, mulmod(mload(0x25c0), 1, f_q))
{
            let result := mulmod(mload(0xa20), mload(0x25c0), f_q)
result := addmod(mulmod(mload(0x660), sub(f_q, mload(0x25e0)), f_q), result, f_q)
mstore(9728, result)
        }
mstore(0x2620, mulmod(3860370625838117017501327045244227871206764201116468958063324100051382735289, mload(0x2440), f_q))
mstore(0x2640, mulmod(mload(0x2620), 11211301017135681023579411905410872569206244553457844956874280139879520583390, f_q))
{
            let result := mulmod(mload(0xa20), mload(0x2620), f_q)
result := addmod(mulmod(mload(0x660), sub(f_q, mload(0x2640)), f_q), result, f_q)
mstore(9824, result)
        }
mstore(0x2680, mulmod(21616901807277407275624036604424346159916096890712898844034238973395610537327, mload(0x2440), f_q))
mstore(0x26a0, mulmod(mload(0x2680), 1426404432721484388505361748317961535523355871255605456897797744433766488507, f_q))
{
            let result := mulmod(mload(0xa20), mload(0x2680), f_q)
result := addmod(mulmod(mload(0x660), sub(f_q, mload(0x26a0)), f_q), result, f_q)
mstore(9920, result)
        }
mstore(0x26e0, mulmod(3209408481237076479025468386201293941554240476766691830436732310949352383503, mload(0x2440), f_q))
mstore(0x2700, mulmod(mload(0x26e0), 12619617507853212586156872920672483948819476989779550311307282715684870266992, f_q))
{
            let result := mulmod(mload(0xa20), mload(0x26e0), f_q)
result := addmod(mulmod(mload(0x660), sub(f_q, mload(0x2700)), f_q), result, f_q)
mstore(10016, result)
        }
mstore(0x2740, mulmod(1, mload(0x24e0), f_q))
mstore(0x2760, mulmod(mload(0x2740), mload(0x2520), f_q))
mstore(0x2780, mulmod(mload(0x2760), mload(0x2560), f_q))
mstore(0x27a0, mulmod(mload(0x2780), mload(0x25a0), f_q))
mstore(0x27c0, mulmod(10676941854703594198666993839846402519342119846958189386823924046696287912228, mload(0x660), f_q))
mstore(0x27e0, mulmod(mload(0x27c0), 1, f_q))
{
            let result := mulmod(mload(0xa20), mload(0x27c0), f_q)
result := addmod(mulmod(mload(0x660), sub(f_q, mload(0x27e0)), f_q), result, f_q)
mstore(10240, result)
        }
mstore(0x2820, mulmod(11211301017135681023579411905410872569206244553457844956874280139879520583389, mload(0x660), f_q))
mstore(0x2840, mulmod(mload(0x2820), 11211301017135681023579411905410872569206244553457844956874280139879520583390, f_q))
{
            let result := mulmod(mload(0xa20), mload(0x2820), f_q)
result := addmod(mulmod(mload(0x660), sub(f_q, mload(0x2840)), f_q), result, f_q)
mstore(10336, result)
        }
mstore(0x2880, mulmod(13154116519010929542673167886091370382741775939114889923107781597533678454430, mload(0x660), f_q))
mstore(0x28a0, mulmod(mload(0x2880), 1, f_q))
{
            let result := mulmod(mload(0xa20), mload(0x2880), f_q)
result := addmod(mulmod(mload(0x660), sub(f_q, mload(0x28a0)), f_q), result, f_q)
mstore(10432, result)
        }
mstore(0x28e0, mulmod(8734126352828345679573237859165904705806588461301144420590422589042130041187, mload(0x660), f_q))
mstore(0x2900, mulmod(mload(0x28e0), 8734126352828345679573237859165904705806588461301144420590422589042130041188, f_q))
{
            let result := mulmod(mload(0xa20), mload(0x28e0), f_q)
result := addmod(mulmod(mload(0x660), sub(f_q, mload(0x2900)), f_q), result, f_q)
mstore(10528, result)
        }
mstore(0x2940, mulmod(mload(0x2740), mload(0x24a0), f_q))
{
            let result := mulmod(mload(0xa20), 1, f_q)
result := addmod(mulmod(mload(0x660), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q), result, f_q)
mstore(10592, result)
        }
{
            let prod := mload(0x2600)

                prod := mulmod(mload(0x2660), prod, f_q)
                mstore(0x2980, prod)

                prod := mulmod(mload(0x26c0), prod, f_q)
                mstore(0x29a0, prod)

                prod := mulmod(mload(0x2720), prod, f_q)
                mstore(0x29c0, prod)

                prod := mulmod(mload(0x2800), prod, f_q)
                mstore(0x29e0, prod)

                prod := mulmod(mload(0x2860), prod, f_q)
                mstore(0x2a00, prod)

                prod := mulmod(mload(0x2760), prod, f_q)
                mstore(0x2a20, prod)

                prod := mulmod(mload(0x28c0), prod, f_q)
                mstore(0x2a40, prod)

                prod := mulmod(mload(0x2920), prod, f_q)
                mstore(0x2a60, prod)

                prod := mulmod(mload(0x2940), prod, f_q)
                mstore(0x2a80, prod)

                prod := mulmod(mload(0x2960), prod, f_q)
                mstore(0x2aa0, prod)

                prod := mulmod(mload(0x2740), prod, f_q)
                mstore(0x2ac0, prod)

        }
mstore(0x2b00, 32)
mstore(0x2b20, 32)
mstore(0x2b40, 32)
mstore(0x2b60, mload(0x2ac0))
mstore(0x2b80, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x2ba0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x2b00, 0xc0, 0x2ae0, 0x20), 1), success)
{

            let inv := mload(0x2ae0)
            let v

                    v := mload(0x2740)
                    mstore(10048, mulmod(mload(0x2aa0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x2960)
                    mstore(10592, mulmod(mload(0x2a80), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x2940)
                    mstore(10560, mulmod(mload(0x2a60), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x2920)
                    mstore(10528, mulmod(mload(0x2a40), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x28c0)
                    mstore(10432, mulmod(mload(0x2a20), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x2760)
                    mstore(10080, mulmod(mload(0x2a00), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x2860)
                    mstore(10336, mulmod(mload(0x29e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x2800)
                    mstore(10240, mulmod(mload(0x29c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x2720)
                    mstore(10016, mulmod(mload(0x29a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x26c0)
                    mstore(9920, mulmod(mload(0x2980), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x2660)
                    mstore(9824, mulmod(mload(0x2600), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x2600, inv)

        }
{
            let result := mload(0x2600)
result := addmod(mload(0x2660), result, f_q)
result := addmod(mload(0x26c0), result, f_q)
result := addmod(mload(0x2720), result, f_q)
mstore(11200, result)
        }
mstore(0x2be0, mulmod(mload(0x27a0), mload(0x2760), f_q))
{
            let result := mload(0x2800)
result := addmod(mload(0x2860), result, f_q)
mstore(11264, result)
        }
mstore(0x2c20, mulmod(mload(0x27a0), mload(0x2940), f_q))
{
            let result := mload(0x28c0)
result := addmod(mload(0x2920), result, f_q)
mstore(11328, result)
        }
mstore(0x2c60, mulmod(mload(0x27a0), mload(0x2740), f_q))
{
            let result := mload(0x2960)
mstore(11392, result)
        }
{
            let prod := mload(0x2bc0)

                prod := mulmod(mload(0x2c00), prod, f_q)
                mstore(0x2ca0, prod)

                prod := mulmod(mload(0x2c40), prod, f_q)
                mstore(0x2cc0, prod)

                prod := mulmod(mload(0x2c80), prod, f_q)
                mstore(0x2ce0, prod)

        }
mstore(0x2d20, 32)
mstore(0x2d40, 32)
mstore(0x2d60, 32)
mstore(0x2d80, mload(0x2ce0))
mstore(0x2da0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x2dc0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x2d20, 0xc0, 0x2d00, 0x20), 1), success)
{

            let inv := mload(0x2d00)
            let v

                    v := mload(0x2c80)
                    mstore(11392, mulmod(mload(0x2cc0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x2c40)
                    mstore(11328, mulmod(mload(0x2ca0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x2c00)
                    mstore(11264, mulmod(mload(0x2bc0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x2bc0, inv)

        }
mstore(0x2de0, mulmod(mload(0x2be0), mload(0x2c00), f_q))
mstore(0x2e00, mulmod(mload(0x2c20), mload(0x2c40), f_q))
mstore(0x2e20, mulmod(mload(0x2c60), mload(0x2c80), f_q))
mstore(0x2e40, mulmod(mload(0x920), mload(0x920), f_q))
mstore(0x2e60, mulmod(mload(0x2e40), mload(0x920), f_q))
mstore(0x2e80, mulmod(mload(0x2e60), mload(0x920), f_q))
mstore(0x2ea0, mulmod(mload(0x2e80), mload(0x920), f_q))
mstore(0x2ec0, mulmod(mload(0x2ea0), mload(0x920), f_q))
mstore(0x2ee0, mulmod(mload(0x2ec0), mload(0x920), f_q))
mstore(0x2f00, mulmod(mload(0x2ee0), mload(0x920), f_q))
mstore(0x2f20, mulmod(mload(0x2f00), mload(0x920), f_q))
mstore(0x2f40, mulmod(mload(0x2f20), mload(0x920), f_q))
mstore(0x2f60, mulmod(mload(0x980), mload(0x980), f_q))
mstore(0x2f80, mulmod(mload(0x2f60), mload(0x980), f_q))
mstore(0x2fa0, mulmod(mload(0x2f80), mload(0x980), f_q))
{
            let result := mulmod(mload(0x6a0), mload(0x2600), f_q)
result := addmod(mulmod(mload(0x6c0), mload(0x2660), f_q), result, f_q)
result := addmod(mulmod(mload(0x6e0), mload(0x26c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x700), mload(0x2720), f_q), result, f_q)
mstore(12224, result)
        }
mstore(0x2fe0, mulmod(mload(0x2fc0), mload(0x2bc0), f_q))
mstore(0x3000, mulmod(sub(f_q, mload(0x2fe0)), 1, f_q))
mstore(0x3020, mulmod(mload(0x3000), 1, f_q))
mstore(0x3040, mulmod(1, mload(0x2be0), f_q))
{
            let result := mulmod(mload(0x820), mload(0x2800), f_q)
result := addmod(mulmod(mload(0x840), mload(0x2860), f_q), result, f_q)
mstore(12384, result)
        }
mstore(0x3080, mulmod(mload(0x3060), mload(0x2de0), f_q))
mstore(0x30a0, mulmod(sub(f_q, mload(0x3080)), 1, f_q))
mstore(0x30c0, mulmod(mload(0x3040), 1, f_q))
{
            let result := mulmod(mload(0x860), mload(0x2800), f_q)
result := addmod(mulmod(mload(0x880), mload(0x2860), f_q), result, f_q)
mstore(12512, result)
        }
mstore(0x3100, mulmod(mload(0x30e0), mload(0x2de0), f_q))
mstore(0x3120, mulmod(sub(f_q, mload(0x3100)), mload(0x920), f_q))
mstore(0x3140, mulmod(mload(0x3040), mload(0x920), f_q))
mstore(0x3160, addmod(mload(0x30a0), mload(0x3120), f_q))
mstore(0x3180, mulmod(mload(0x3160), mload(0x980), f_q))
mstore(0x31a0, mulmod(mload(0x30c0), mload(0x980), f_q))
mstore(0x31c0, mulmod(mload(0x3140), mload(0x980), f_q))
mstore(0x31e0, addmod(mload(0x3020), mload(0x3180), f_q))
mstore(0x3200, mulmod(1, mload(0x2c20), f_q))
{
            let result := mulmod(mload(0x8a0), mload(0x28c0), f_q)
result := addmod(mulmod(mload(0x8c0), mload(0x2920), f_q), result, f_q)
mstore(12832, result)
        }
mstore(0x3240, mulmod(mload(0x3220), mload(0x2e00), f_q))
mstore(0x3260, mulmod(sub(f_q, mload(0x3240)), 1, f_q))
mstore(0x3280, mulmod(mload(0x3200), 1, f_q))
mstore(0x32a0, mulmod(mload(0x3260), mload(0x2f60), f_q))
mstore(0x32c0, mulmod(mload(0x3280), mload(0x2f60), f_q))
mstore(0x32e0, addmod(mload(0x31e0), mload(0x32a0), f_q))
mstore(0x3300, mulmod(1, mload(0x2c60), f_q))
{
            let result := mulmod(mload(0x8e0), mload(0x2960), f_q)
mstore(13088, result)
        }
mstore(0x3340, mulmod(mload(0x3320), mload(0x2e20), f_q))
mstore(0x3360, mulmod(sub(f_q, mload(0x3340)), 1, f_q))
mstore(0x3380, mulmod(mload(0x3300), 1, f_q))
{
            let result := mulmod(mload(0x720), mload(0x2960), f_q)
mstore(13216, result)
        }
mstore(0x33c0, mulmod(mload(0x33a0), mload(0x2e20), f_q))
mstore(0x33e0, mulmod(sub(f_q, mload(0x33c0)), mload(0x920), f_q))
mstore(0x3400, mulmod(mload(0x3300), mload(0x920), f_q))
mstore(0x3420, addmod(mload(0x3360), mload(0x33e0), f_q))
{
            let result := mulmod(mload(0x740), mload(0x2960), f_q)
mstore(13376, result)
        }
mstore(0x3460, mulmod(mload(0x3440), mload(0x2e20), f_q))
mstore(0x3480, mulmod(sub(f_q, mload(0x3460)), mload(0x2e40), f_q))
mstore(0x34a0, mulmod(mload(0x3300), mload(0x2e40), f_q))
mstore(0x34c0, addmod(mload(0x3420), mload(0x3480), f_q))
{
            let result := mulmod(mload(0x760), mload(0x2960), f_q)
mstore(13536, result)
        }
mstore(0x3500, mulmod(mload(0x34e0), mload(0x2e20), f_q))
mstore(0x3520, mulmod(sub(f_q, mload(0x3500)), mload(0x2e60), f_q))
mstore(0x3540, mulmod(mload(0x3300), mload(0x2e60), f_q))
mstore(0x3560, addmod(mload(0x34c0), mload(0x3520), f_q))
{
            let result := mulmod(mload(0x780), mload(0x2960), f_q)
mstore(13696, result)
        }
mstore(0x35a0, mulmod(mload(0x3580), mload(0x2e20), f_q))
mstore(0x35c0, mulmod(sub(f_q, mload(0x35a0)), mload(0x2e80), f_q))
mstore(0x35e0, mulmod(mload(0x3300), mload(0x2e80), f_q))
mstore(0x3600, addmod(mload(0x3560), mload(0x35c0), f_q))
{
            let result := mulmod(mload(0x7c0), mload(0x2960), f_q)
mstore(13856, result)
        }
mstore(0x3640, mulmod(mload(0x3620), mload(0x2e20), f_q))
mstore(0x3660, mulmod(sub(f_q, mload(0x3640)), mload(0x2ea0), f_q))
mstore(0x3680, mulmod(mload(0x3300), mload(0x2ea0), f_q))
mstore(0x36a0, addmod(mload(0x3600), mload(0x3660), f_q))
{
            let result := mulmod(mload(0x7e0), mload(0x2960), f_q)
mstore(14016, result)
        }
mstore(0x36e0, mulmod(mload(0x36c0), mload(0x2e20), f_q))
mstore(0x3700, mulmod(sub(f_q, mload(0x36e0)), mload(0x2ec0), f_q))
mstore(0x3720, mulmod(mload(0x3300), mload(0x2ec0), f_q))
mstore(0x3740, addmod(mload(0x36a0), mload(0x3700), f_q))
{
            let result := mulmod(mload(0x800), mload(0x2960), f_q)
mstore(14176, result)
        }
mstore(0x3780, mulmod(mload(0x3760), mload(0x2e20), f_q))
mstore(0x37a0, mulmod(sub(f_q, mload(0x3780)), mload(0x2ee0), f_q))
mstore(0x37c0, mulmod(mload(0x3300), mload(0x2ee0), f_q))
mstore(0x37e0, addmod(mload(0x3740), mload(0x37a0), f_q))
mstore(0x3800, mulmod(mload(0x23c0), mload(0x2c60), f_q))
mstore(0x3820, mulmod(mload(0x23e0), mload(0x2c60), f_q))
mstore(0x3840, mulmod(mload(0x2400), mload(0x2c60), f_q))
{
            let result := mulmod(mload(0x2420), mload(0x2960), f_q)
mstore(14432, result)
        }
mstore(0x3880, mulmod(mload(0x3860), mload(0x2e20), f_q))
mstore(0x38a0, mulmod(sub(f_q, mload(0x3880)), mload(0x2f00), f_q))
mstore(0x38c0, mulmod(mload(0x3300), mload(0x2f00), f_q))
mstore(0x38e0, mulmod(mload(0x3800), mload(0x2f00), f_q))
mstore(0x3900, mulmod(mload(0x3820), mload(0x2f00), f_q))
mstore(0x3920, mulmod(mload(0x3840), mload(0x2f00), f_q))
mstore(0x3940, addmod(mload(0x37e0), mload(0x38a0), f_q))
{
            let result := mulmod(mload(0x7a0), mload(0x2960), f_q)
mstore(14688, result)
        }
mstore(0x3980, mulmod(mload(0x3960), mload(0x2e20), f_q))
mstore(0x39a0, mulmod(sub(f_q, mload(0x3980)), mload(0x2f20), f_q))
mstore(0x39c0, mulmod(mload(0x3300), mload(0x2f20), f_q))
mstore(0x39e0, addmod(mload(0x3940), mload(0x39a0), f_q))
mstore(0x3a00, mulmod(mload(0x39e0), mload(0x2f80), f_q))
mstore(0x3a20, mulmod(mload(0x3380), mload(0x2f80), f_q))
mstore(0x3a40, mulmod(mload(0x3400), mload(0x2f80), f_q))
mstore(0x3a60, mulmod(mload(0x34a0), mload(0x2f80), f_q))
mstore(0x3a80, mulmod(mload(0x3540), mload(0x2f80), f_q))
mstore(0x3aa0, mulmod(mload(0x35e0), mload(0x2f80), f_q))
mstore(0x3ac0, mulmod(mload(0x3680), mload(0x2f80), f_q))
mstore(0x3ae0, mulmod(mload(0x3720), mload(0x2f80), f_q))
mstore(0x3b00, mulmod(mload(0x37c0), mload(0x2f80), f_q))
mstore(0x3b20, mulmod(mload(0x38c0), mload(0x2f80), f_q))
mstore(0x3b40, mulmod(mload(0x38e0), mload(0x2f80), f_q))
mstore(0x3b60, mulmod(mload(0x3900), mload(0x2f80), f_q))
mstore(0x3b80, mulmod(mload(0x3920), mload(0x2f80), f_q))
mstore(0x3ba0, mulmod(mload(0x39c0), mload(0x2f80), f_q))
mstore(0x3bc0, addmod(mload(0x32e0), mload(0x3a00), f_q))
mstore(0x3be0, mulmod(1, mload(0x27a0), f_q))
mstore(0x3c00, mulmod(1, mload(0xa20), f_q))
mstore(0x3c20, 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(0x3c40, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0x3c60, mload(0x3bc0))
success := and(eq(staticcall(gas(), 0x7, 0x3c20, 0x60, 0x3c20, 0x40), 1), success)
mstore(0x3c80, mload(0x3c20))
                    mstore(0x3ca0, mload(0x3c40))
mstore(0x3cc0, mload(0x240))
                    mstore(0x3ce0, mload(0x260))
success := and(eq(staticcall(gas(), 0x6, 0x3c80, 0x80, 0x3c80, 0x40), 1), success)
mstore(0x3d00, mload(0x420))
                    mstore(0x3d20, mload(0x440))
mstore(0x3d40, mload(0x31a0))
success := and(eq(staticcall(gas(), 0x7, 0x3d00, 0x60, 0x3d00, 0x40), 1), success)
mstore(0x3d60, mload(0x3c80))
                    mstore(0x3d80, mload(0x3ca0))
mstore(0x3da0, mload(0x3d00))
                    mstore(0x3dc0, mload(0x3d20))
success := and(eq(staticcall(gas(), 0x6, 0x3d60, 0x80, 0x3d60, 0x40), 1), success)
mstore(0x3de0, mload(0x460))
                    mstore(0x3e00, mload(0x480))
mstore(0x3e20, mload(0x31c0))
success := and(eq(staticcall(gas(), 0x7, 0x3de0, 0x60, 0x3de0, 0x40), 1), success)
mstore(0x3e40, mload(0x3d60))
                    mstore(0x3e60, mload(0x3d80))
mstore(0x3e80, mload(0x3de0))
                    mstore(0x3ea0, mload(0x3e00))
success := and(eq(staticcall(gas(), 0x6, 0x3e40, 0x80, 0x3e40, 0x40), 1), success)
mstore(0x3ec0, mload(0x2e0))
                    mstore(0x3ee0, mload(0x300))
mstore(0x3f00, mload(0x32c0))
success := and(eq(staticcall(gas(), 0x7, 0x3ec0, 0x60, 0x3ec0, 0x40), 1), success)
mstore(0x3f20, mload(0x3e40))
                    mstore(0x3f40, mload(0x3e60))
mstore(0x3f60, mload(0x3ec0))
                    mstore(0x3f80, mload(0x3ee0))
success := and(eq(staticcall(gas(), 0x6, 0x3f20, 0x80, 0x3f20, 0x40), 1), success)
mstore(0x3fa0, mload(0x320))
                    mstore(0x3fc0, mload(0x340))
mstore(0x3fe0, mload(0x3a20))
success := and(eq(staticcall(gas(), 0x7, 0x3fa0, 0x60, 0x3fa0, 0x40), 1), success)
mstore(0x4000, mload(0x3f20))
                    mstore(0x4020, mload(0x3f40))
mstore(0x4040, mload(0x3fa0))
                    mstore(0x4060, mload(0x3fc0))
success := and(eq(staticcall(gas(), 0x6, 0x4000, 0x80, 0x4000, 0x40), 1), success)
mstore(0x4080, 0x1b8ffed810e245e89e5d19c1292b0ac3be02bb5938585ed4e4c84dee6737816a)
                    mstore(0x40a0, 0x182e6a16c8827ab59110a40b60a4b22284f697b0f8d9e384b4ca12ac4b44b5bd)
mstore(0x40c0, mload(0x3a40))
success := and(eq(staticcall(gas(), 0x7, 0x4080, 0x60, 0x4080, 0x40), 1), success)
mstore(0x40e0, mload(0x4000))
                    mstore(0x4100, mload(0x4020))
mstore(0x4120, mload(0x4080))
                    mstore(0x4140, mload(0x40a0))
success := and(eq(staticcall(gas(), 0x6, 0x40e0, 0x80, 0x40e0, 0x40), 1), success)
mstore(0x4160, 0x21c6ea7d6dbcd767ffb9d9beeb4f9c2f8243bc65290f2d75a59aea4f65ba8f3d)
                    mstore(0x4180, 0x24d0a0acb031c9a5687da08cdaf96650aae5c60435739bda8bbd574eb962622c)
mstore(0x41a0, mload(0x3a60))
success := and(eq(staticcall(gas(), 0x7, 0x4160, 0x60, 0x4160, 0x40), 1), success)
mstore(0x41c0, mload(0x40e0))
                    mstore(0x41e0, mload(0x4100))
mstore(0x4200, mload(0x4160))
                    mstore(0x4220, mload(0x4180))
success := and(eq(staticcall(gas(), 0x6, 0x41c0, 0x80, 0x41c0, 0x40), 1), success)
mstore(0x4240, 0x046da868f08ab99fb6466bc11d20775b78da15ad005cf8735363e2a646cf51c7)
                    mstore(0x4260, 0x24d74b78327e75d255b926c759bc2036768ca71fce39ec4e44c500ff1bccd667)
mstore(0x4280, mload(0x3a80))
success := and(eq(staticcall(gas(), 0x7, 0x4240, 0x60, 0x4240, 0x40), 1), success)
mstore(0x42a0, mload(0x41c0))
                    mstore(0x42c0, mload(0x41e0))
mstore(0x42e0, mload(0x4240))
                    mstore(0x4300, mload(0x4260))
success := and(eq(staticcall(gas(), 0x6, 0x42a0, 0x80, 0x42a0, 0x40), 1), success)
mstore(0x4320, 0x1d424a0452cc4e70395141b5bc848d779cf2dcb1880b2bce28e6fe3de9b87ceb)
                    mstore(0x4340, 0x10c9aeccdc1df08140bf676f607c4ea073eed4175296e929f78b0ebf8321ec5b)
mstore(0x4360, mload(0x3aa0))
success := and(eq(staticcall(gas(), 0x7, 0x4320, 0x60, 0x4320, 0x40), 1), success)
mstore(0x4380, mload(0x42a0))
                    mstore(0x43a0, mload(0x42c0))
mstore(0x43c0, mload(0x4320))
                    mstore(0x43e0, mload(0x4340))
success := and(eq(staticcall(gas(), 0x6, 0x4380, 0x80, 0x4380, 0x40), 1), success)
mstore(0x4400, 0x078dd5b7891e5ff8048c728bfc1f6f8a83f7152618c74aa5324dea3ef4147576)
                    mstore(0x4420, 0x09b64dfa87de01e9df1d473b473f1316685cf3f64ac8664247e25bf7fee3590b)
mstore(0x4440, mload(0x3ac0))
success := and(eq(staticcall(gas(), 0x7, 0x4400, 0x60, 0x4400, 0x40), 1), success)
mstore(0x4460, mload(0x4380))
                    mstore(0x4480, mload(0x43a0))
mstore(0x44a0, mload(0x4400))
                    mstore(0x44c0, mload(0x4420))
success := and(eq(staticcall(gas(), 0x6, 0x4460, 0x80, 0x4460, 0x40), 1), success)
mstore(0x44e0, 0x20d84a832e073d8964508501864dd439e563977deef41cc90862b14d67b76458)
                    mstore(0x4500, 0x2a2a426a4d379ba3f482dce003124a8487f6158df120ae05050f844c83c7a777)
mstore(0x4520, mload(0x3ae0))
success := and(eq(staticcall(gas(), 0x7, 0x44e0, 0x60, 0x44e0, 0x40), 1), success)
mstore(0x4540, mload(0x4460))
                    mstore(0x4560, mload(0x4480))
mstore(0x4580, mload(0x44e0))
                    mstore(0x45a0, mload(0x4500))
success := and(eq(staticcall(gas(), 0x6, 0x4540, 0x80, 0x4540, 0x40), 1), success)
mstore(0x45c0, 0x29660b4b56667ecf219990fcf2d2ba0a409556dc5643a9b9dae988cba032b34a)
                    mstore(0x45e0, 0x240b387bafa20263abf225c633a0e137109fe08332d7fccdf4d87d28d3fc6963)
mstore(0x4600, mload(0x3b00))
success := and(eq(staticcall(gas(), 0x7, 0x45c0, 0x60, 0x45c0, 0x40), 1), success)
mstore(0x4620, mload(0x4540))
                    mstore(0x4640, mload(0x4560))
mstore(0x4660, mload(0x45c0))
                    mstore(0x4680, mload(0x45e0))
success := and(eq(staticcall(gas(), 0x6, 0x4620, 0x80, 0x4620, 0x40), 1), success)
mstore(0x46a0, mload(0x540))
                    mstore(0x46c0, mload(0x560))
mstore(0x46e0, mload(0x3b20))
success := and(eq(staticcall(gas(), 0x7, 0x46a0, 0x60, 0x46a0, 0x40), 1), success)
mstore(0x4700, mload(0x4620))
                    mstore(0x4720, mload(0x4640))
mstore(0x4740, mload(0x46a0))
                    mstore(0x4760, mload(0x46c0))
success := and(eq(staticcall(gas(), 0x6, 0x4700, 0x80, 0x4700, 0x40), 1), success)
mstore(0x4780, mload(0x580))
                    mstore(0x47a0, mload(0x5a0))
mstore(0x47c0, mload(0x3b40))
success := and(eq(staticcall(gas(), 0x7, 0x4780, 0x60, 0x4780, 0x40), 1), success)
mstore(0x47e0, mload(0x4700))
                    mstore(0x4800, mload(0x4720))
mstore(0x4820, mload(0x4780))
                    mstore(0x4840, mload(0x47a0))
success := and(eq(staticcall(gas(), 0x6, 0x47e0, 0x80, 0x47e0, 0x40), 1), success)
mstore(0x4860, mload(0x5c0))
                    mstore(0x4880, mload(0x5e0))
mstore(0x48a0, mload(0x3b60))
success := and(eq(staticcall(gas(), 0x7, 0x4860, 0x60, 0x4860, 0x40), 1), success)
mstore(0x48c0, mload(0x47e0))
                    mstore(0x48e0, mload(0x4800))
mstore(0x4900, mload(0x4860))
                    mstore(0x4920, mload(0x4880))
success := and(eq(staticcall(gas(), 0x6, 0x48c0, 0x80, 0x48c0, 0x40), 1), success)
mstore(0x4940, mload(0x600))
                    mstore(0x4960, mload(0x620))
mstore(0x4980, mload(0x3b80))
success := and(eq(staticcall(gas(), 0x7, 0x4940, 0x60, 0x4940, 0x40), 1), success)
mstore(0x49a0, mload(0x48c0))
                    mstore(0x49c0, mload(0x48e0))
mstore(0x49e0, mload(0x4940))
                    mstore(0x4a00, mload(0x4960))
success := and(eq(staticcall(gas(), 0x6, 0x49a0, 0x80, 0x49a0, 0x40), 1), success)
mstore(0x4a20, mload(0x4a0))
                    mstore(0x4a40, mload(0x4c0))
mstore(0x4a60, mload(0x3ba0))
success := and(eq(staticcall(gas(), 0x7, 0x4a20, 0x60, 0x4a20, 0x40), 1), success)
mstore(0x4a80, mload(0x49a0))
                    mstore(0x4aa0, mload(0x49c0))
mstore(0x4ac0, mload(0x4a20))
                    mstore(0x4ae0, mload(0x4a40))
success := and(eq(staticcall(gas(), 0x6, 0x4a80, 0x80, 0x4a80, 0x40), 1), success)
mstore(0x4b00, mload(0x9c0))
                    mstore(0x4b20, mload(0x9e0))
mstore(0x4b40, sub(f_q, mload(0x3be0)))
success := and(eq(staticcall(gas(), 0x7, 0x4b00, 0x60, 0x4b00, 0x40), 1), success)
mstore(0x4b60, mload(0x4a80))
                    mstore(0x4b80, mload(0x4aa0))
mstore(0x4ba0, mload(0x4b00))
                    mstore(0x4bc0, mload(0x4b20))
success := and(eq(staticcall(gas(), 0x6, 0x4b60, 0x80, 0x4b60, 0x40), 1), success)
mstore(0x4be0, mload(0xa60))
                    mstore(0x4c00, mload(0xa80))
mstore(0x4c20, mload(0x3c00))
success := and(eq(staticcall(gas(), 0x7, 0x4be0, 0x60, 0x4be0, 0x40), 1), success)
mstore(0x4c40, mload(0x4b60))
                    mstore(0x4c60, mload(0x4b80))
mstore(0x4c80, mload(0x4be0))
                    mstore(0x4ca0, mload(0x4c00))
success := and(eq(staticcall(gas(), 0x6, 0x4c40, 0x80, 0x4c40, 0x40), 1), success)
mstore(0x4cc0, mload(0x4c40))
                    mstore(0x4ce0, mload(0x4c60))
mstore(0x4d00, mload(0xa60))
                    mstore(0x4d20, mload(0xa80))
mstore(0x4d40, mload(0xaa0))
                    mstore(0x4d60, mload(0xac0))
mstore(0x4d80, mload(0xae0))
                    mstore(0x4da0, mload(0xb00))
mstore(0x4dc0, keccak256(0x4cc0, 256))
mstore(19936, mod(mload(19904), f_q))
mstore(0x4e00, mulmod(mload(0x4de0), mload(0x4de0), f_q))
mstore(0x4e20, mulmod(1, mload(0x4de0), f_q))
mstore(0x4e40, mload(0x4d40))
                    mstore(0x4e60, mload(0x4d60))
mstore(0x4e80, mload(0x4e20))
success := and(eq(staticcall(gas(), 0x7, 0x4e40, 0x60, 0x4e40, 0x40), 1), success)
mstore(0x4ea0, mload(0x4cc0))
                    mstore(0x4ec0, mload(0x4ce0))
mstore(0x4ee0, mload(0x4e40))
                    mstore(0x4f00, mload(0x4e60))
success := and(eq(staticcall(gas(), 0x6, 0x4ea0, 0x80, 0x4ea0, 0x40), 1), success)
mstore(0x4f20, mload(0x4d80))
                    mstore(0x4f40, mload(0x4da0))
mstore(0x4f60, mload(0x4e20))
success := and(eq(staticcall(gas(), 0x7, 0x4f20, 0x60, 0x4f20, 0x40), 1), success)
mstore(0x4f80, mload(0x4d00))
                    mstore(0x4fa0, mload(0x4d20))
mstore(0x4fc0, mload(0x4f20))
                    mstore(0x4fe0, mload(0x4f40))
success := and(eq(staticcall(gas(), 0x6, 0x4f80, 0x80, 0x4f80, 0x40), 1), success)
mstore(0x5000, mload(0x4ea0))
                    mstore(0x5020, mload(0x4ec0))
mstore(0x5040, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x5060, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x5080, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x50a0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x50c0, mload(0x4f80))
                    mstore(0x50e0, mload(0x4fa0))
mstore(0x5100, 0x172aa93c41f16e1e04d62ac976a5d945f4be0acab990c6dc19ac4a7cf68bf77b)
            mstore(0x5120, 0x2ae0c8c3a090f7200ff398ee9845bbae8f8c1445ae7b632212775f60a0e21600)
            mstore(0x5140, 0x190fa476a5b352809ed41d7a0d7fe12b8f685e3c12a6d83855dba27aaf469643)
            mstore(0x5160, 0x1c0a500618907df9e4273d5181e31088deb1f05132de037cbfe73888f97f77c9)
success := and(eq(staticcall(gas(), 0x8, 0x5000, 0x180, 0x5000, 0x20), 1), success)
success := and(eq(mload(0x5000), 1), success)

            // Revert if anything fails
            if iszero(success) { revert(0, 0) }

            // Return empty bytes on success
            return(0, 0)

        }
    }
}
