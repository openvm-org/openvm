[package]
name = "openvm-native-recursion"
version.workspace = true
authors.workspace = true
edition.workspace = true
homepage.workspace = true
repository.workspace = true

[dependencies]
openvm-stark-backend = { workspace = true }
openvm-native-circuit = { workspace = true }
openvm-native-compiler = { workspace = true }
openvm-native-compiler-derive = { workspace = true }
openvm-stark-sdk = { workspace = true }
openvm-circuit = { workspace = true }

p3-dft = { workspace = true }
p3-fri = { workspace = true }
p3-symmetric = { workspace = true }
p3-merkle-tree = { workspace = true }
snark-verifier-sdk = { workspace = true, optional = true }
itertools.workspace = true
rand.workspace = true
serde.workspace = true
serde_json.workspace = true
tracing.workspace = true
lazy_static.workspace = true
once_cell = { workspace = true, optional = true, features = ["std"] }
metrics = { workspace = true, optional = true }
cfg-if = { workspace = true }
serde_with = { workspace = true, optional = true, features = ["hex"] }

[dev-dependencies]
openvm-native-recursion = { workspace = true, features = ["test-utils"] }
tempfile = "3.14.0"
bitcode = { workspace = true }

[features]
default = ["parallel", "jemalloc"]
static-verifier = [
    "openvm-native-compiler/halo2-compiler",
    "snark-verifier-sdk",
    "dep:once_cell",
    "dep:serde_with",
]
evm-prove = ["static-verifier", "snark-verifier-sdk/loader_evm"]
evm-verify = [
    "evm-prove",
    "snark-verifier-sdk/revm",
] # evm-verify needs REVM to simulate EVM contract verification
test-utils = ["openvm-circuit/test-utils"]
bench-metrics = [
    "dep:metrics",
    "openvm-circuit/bench-metrics",
    "openvm-native-compiler/bench-metrics",
]
parallel = ["openvm-stark-backend/parallel"]
mimalloc = ["openvm-stark-backend/mimalloc"]
jemalloc = ["openvm-stark-backend/jemalloc"]
nightly-features = ["openvm-circuit/nightly-features"]
